public class NeuronalNetwork {
    private double[][] poids; // Poids des connexions entre les neurones
    private double[] biais; // Biais pour chaque neurone
    private int nombreNeuronesEntree;
    private int nombreNeuronesSortie;

    // Constructeur
    public NeuronalNetwork(int nombreNeuronesEntree, int nombreNeuronesSortie) {
        this.nombreNeuronesEntree = nombreNeuronesEntree;
        this.nombreNeuronesSortie = nombreNeuronesSortie;
        
        // Initialisation des poids et des biais de manière aléatoire (vous pouvez utiliser d'autres méthodes d'initialisation)
        poids = new double[nombreNeuronesSortie][nombreNeuronesEntree];
        biais = new double[nombreNeuronesSortie];
        initialiser();
    }

    // Méthode pour initialiser les poids et les biais de manière aléatoire
    private void initialiser() {
        for (int i = 0; i < nombreNeuronesSortie; i++) {
            for (int j = 0; j < nombreNeuronesEntree; j++) {
                poids[i][j] = Math.random() * 2 - 1; // Valeurs aléatoires entre -1 et 1
            }
            biais[i] = Math.random() * 2 - 1; // Biais aléatoire entre -1 et 1
        }
    }

    // Méthode pour effectuer la somme pondérée des entrées
    private double sommePonderee(double[] entrees) {
        double somme = 0;
        for (int i = 0; i < nombreNeuronesSortie; i++) {
            double produitScalaire = 0;
            for (int j = 0; j < nombreNeuronesEntree; j++) {
                produitScalaire += poids[i][j] * entrees[j];
            }
            somme += produitScalaire + biais[i];
        }
        return somme;
    }

    // Méthode pour obtenir la sortie du réseau de neurones
    public double obtenirSortie(double[] entrees) {
        double sommePonderee = sommePonderee(entrees);
        return fonctionActivation(sommePonderee);
    }

    // Méthode d'activation (vous pouvez utiliser d'autres fonctions d'activation)
    private double fonctionActivation(double sommePonderee) {
        // Utiliser la fonction sigmoïde comme fonction d'activation
        return 1 / (1 + Math.exp(-sommePonderee));
    }
}
